
on init 
    tcm.init(100)
    declare arg2 := 2
end on

taskfunc func2(var arg)
    inc(arg)
end taskfunc

taskfunc func(arg1, var arg2)
    message(arg1)
    inc(arg2)
    func2(arg2)
end taskfunc


on note 
    func(1,arg2)
    message(arg2)
end on

{ Compiled on Sun Jun 24 02:41:36 2018 }
on init
  declare $concat_it
  declare $concat_offset
  declare $string_it
  declare $list_it
  declare const $MEM_SIZE := 32768
  declare const $STACK_SIZE := 100
  declare const $MAX_TASKS := $MEM_SIZE/$STACK_SIZE-1
  declare const $TASK_0 := $MEM_SIZE-($STACK_SIZE*$MAX_TASKS)
  declare const $TOO_MANY_TASKS := 1
  declare const $STACK_OVERFLOW := 2
  declare const $STACK_UNDERFLOW := 3
  declare %p[$MEM_SIZE]
  declare $sp
  $sp := $TASK_0+$STACK_SIZE
  declare $fp
  $fp := $TASK_0+$STACK_SIZE
  declare $tx
  declare %tstate__id[$MAX_TASKS] := (0)
  declare %tstate__sp[$MAX_TASKS]
  declare %tstate__fp[$MAX_TASKS]
  declare %tstate__fs[$MAX_TASKS]
  $tx := 0
  while ($tx<$MAX_TASKS)
    %tstate__fs[$tx] := $TASK_0+($tx*$STACK_SIZE)
    inc($tx)
  end while
  $tx := 0
  %tstate__id[0] := -1
  pgs_create_key(TCM_EXCEPTION,5)
  pgs_set_key_val(TCM_EXCEPTION,$CURRENT_SCRIPT_SLOT,0)
  declare $arg2 := 2
end on

function func2
  %p[$sp-2] := $fp
  $fp := $sp-2
  $sp := $fp
  inc(%p[$fp+1])
  $sp := $fp
  $fp := %p[$fp]
  $sp := $sp+2
end function

function func
  %p[$sp-3] := $fp
  $fp := $sp-3
  $sp := $fp
  message(%p[$fp+1])
  inc(%p[$fp+2])
  %p[$sp-1] := %p[$fp+2]
  call func2
  %p[$fp+2] := %p[$sp-1]
  $sp := $fp
  $fp := %p[$fp]
  $sp := $sp+3
end function

on note
  %p[$sp-2] := 1
  %p[$sp-1] := $arg2
  call func
  $arg2 := %p[$sp-1]
  message($arg2)
end on

