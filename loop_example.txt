if condition:

x = kInt(1, 'x')
y = kInt(2, 'y')
with If((x < y) | (x == 1)):
    check()
    x <<= y
    with If(y == 2):
        check()
        y += 1
    with Else((x == 1) & (y == 2)):
        check()
        y += 1
    with Else():
        check()
        x -= 1

out:
if($x < $y or $x = 1)
    $x := $y
    if($y = 2)
        $y := $y + 1
    else
        if($x = 1 and $y = 2)
            $y := $y + 1
        else
            $x := $x - 1
        end if
    end if
end if


x = kInt(1, 'x')
y = kInt(2, 'y')
out = list()

with If(x < y):
    check()
    out.append('True')
self.assertEqual(out.pop(), 'True')
with If(x == y):
    check()
    raise Exception('has to be False')
with Else(x > y):
    check()
    raise Exception('has to be False')
with Else():
    out.append('True')

self.assertEqual(out.pop(), 'True')


case condition:

x = kInt(2, 'x')
y = kInt(1, 'y')

code = list()
Output().set(code)
with Select(x):
    with Case(1):
        check()
        y += 1
    with Case(2):
        check()
        y += 2
        with Select(y):
            with Case(2):
                check()
                y += 1
            with Case(3):
                check()
                CondFalse()
with self.assertRaises(KspCondError):
    with Case(3):
        pass

out:
select($x)
        case(1)
            $y := $y + 1
        case(2)
            $y := $y + 2
    select($y)
        case(2)
            $y := $y + 1
        case(3)
    end select
end select



ForEach loops:

self.arrX = kArrInt([1, 3, 4, 6, 8], 'arrX', size=5)
self.x = kInt(name='x')
self.code = list()

with For(arr=self.arrX) as seq:
    for idx, val in enumerate(seq):
        self.x <<= val

out:
inc($_for_loop_curr_idx)
%_for_loop_idx[$_for_loop_curr_idx] := 0
while(%_for_loop_idx[$_for_loop_curr_idx] < 5)
    $x := %arrX[%_for_loop_idx[$_for_loop_curr_idx]]
    inc(%_for_loop_idx[$_for_loop_curr_idx])
end while
dec($_for_loop_curr_idx)